(()=>{"use strict";class t{constructor(){this.priceInput=document.querySelector("#product-price"),this.quantityInput=document.querySelector("#product-quantity"),this.shippingInput=document.querySelector("#product-shipping"),this.totalBtn=document.querySelector("#total-btn"),this.resultBox=document.querySelector("#result")}getInputs(){return[this.priceInput.value,this.quantityInput.value,this.shippingInput.value]}setPrice(t){this.resultBox.innerHTML=t}onClick(t){this.totalBtn.addEventListener("click",t)}}const e=(...t)=>t.every((t=>"number"==typeof t&&!isNaN(t)));class r{constructor(){this.errorBox=document.querySelector("#error")}hideError(){this.errorBox.classList.add("invisible")}showError(){this.errorBox.classList.remove("invisible")}showErrorMessage(t,r){const s=t.reduce(((t,s,o)=>(e(r[o])?t+="":t+=`${s} is not a number. `,t)),"");this.errorBox.innerText=s,this.showError()}}console.log("hello"),(()=>{const s=new t,o=new r;s.onClick((()=>{o.hideError();const t=s.getInputs(),r=((...t)=>t.map((t=>Number(t))))(...t);if(e(...r)){const[t,e,o]=r,i=t*e+o;s.setPrice(i)}else o.showErrorMessage(t,r)}))})()})();